{"version":3,"sources":["authorization/auth.js","Components/Header/Header.jsx","Components/Header/index.js","api/ChatSocket.js","Components/Message/index.js","Components/Message/Message.jsx","Components/ChatHistory/ChatHistory.jsx","Components/ChatInput/index.js","Components/ChatInput/ChatInput.jsx","Components/Users/index.js","Components/Users/UserList.jsx","Components/ChatPage/index.js","Components/ChatPage/ChatPage.jsx","Components/Login/index.js","Components/Login/LoginPage.jsx","authorization/protected.route.js","App.js","serviceWorker.js","index.js"],"names":["this","sessionStorageUser","name","cb","userId","createGuid","sessionStorage","setItem","JSON","stringify","_name","_userId","removeItem","getItem","parse","S4","Math","random","toString","substring","substr","toLowerCase","Header","auth","logout","props","history","push","className","onClick","handleLogout","Component","withRouter","ChatSocket","socketEndpoint","userName","connect","_socketEndpoint","_socket","WebSocket","close","console","log","onopen","onmessage","msg","onclose","event","onerror","error","messageData","send","Message","temp","message","state","timeStamp","displayTime","style","color","user","body","localeTime","Date","toLocaleString","length","ChatHistory","scrollToBottom","el","scrollIntoView","behvaior","chatHistory","messages","map","index","data","id","ref","ChatInput","onKeyDown","UserList","userList","ChatPage","handleShow","setState","isActive","handleHide","isAuthenticated","_chatSocket","getUserName","getUserId","handleSocketEvent","closeSocket","type","handleMessage","msgData","clientList","prevState","keyCode","target","value","sendMsg","e","to","LoginPage","handleChange","submitLogin","login","keyPressed","key","onKeyPress","onChange","htmlFor","ProtectedRoute","component","rest","render","pathname","from","location","App","exact","path","Boolean","window","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.158e30a9.chunk.js","sourcesContent":["class Auth {\r\n  constructor(){\r\n    this.sessionStorageUser = 'gochatuser';\r\n  }\r\n\r\n  login(name, cb) {\r\n    var userId = this.createGuid()\r\n    sessionStorage.setItem(this.sessionStorageUser, JSON.stringify({\r\n      _name: name,\r\n      _userId: userId\r\n    }));\r\n    cb();\r\n  }\r\n\r\n  logout(cb) {\r\n    sessionStorage.removeItem(this.sessionStorageUser)\r\n    cb();\r\n  }\r\n\r\n  isAuthenticated() {\r\n    var test = sessionStorage.getItem(this.sessionStorageUser);\r\n    return test;\r\n  }\r\n\r\n  getUserName() {\r\n    return JSON.parse(sessionStorage.getItem(this.sessionStorageUser))._name;\r\n  }\r\n\r\n  getUserId() {\r\n    return JSON.parse(sessionStorage.getItem(this.sessionStorageUser))._userId;\r\n  }\r\n\r\n  createGuid() {  \r\n    function S4() {  \r\n       return (((1+Math.random())*0x10000)|0).toString(16).substring(1);  \r\n    }  \r\n    return (S4() + S4() + \"-\" + S4() + \"-4\" + S4().substr(0,3) + \"-\" + S4() + \"-\" + S4() + S4() + S4()).toLowerCase();  \r\n  }  \r\n}\r\n\r\nexport default new Auth()","import React, { Component } from \"react\";\r\nimport auth from \"../../authorization/auth\";\r\nimport { withRouter } from 'react-router-dom';\r\nimport \"./Header.scss\";\r\n\r\nclass Header extends Component{\r\n  handleLogout(){\r\n    auth.logout(() => {\r\n      return this.props.history.push('/');\r\n    })\r\n  }\r\n\r\nrender() {\r\n  return(\r\n  <div className=\"header\">\r\n    <h2>Chat App</h2>\r\n    <button className=\"logout-button\" onClick={() => { this.handleLogout()}}>\r\n          Logout\r\n    </button>\r\n\r\n\r\n  </div>\r\n  )\r\n}\r\n\r\n}\r\n\r\nexport default withRouter(Header);","import Header from \"./Header.jsx\";\r\n\r\nexport default Header;","class ChatSocket{\r\n  _socketEndpoint;\r\n  _socket;\r\n\r\n  constructor(socketEndpoint, userName, userId, connect=false){\r\n    this._socketEndpoint = `${socketEndpoint}?user=${userName}&userId=${userId}`;\r\n    this._socket = connect ? new WebSocket(this._socketEndpoint):null;\r\n  }\r\n\r\n  createSocket(){\r\n    if (this._socket == null){\r\n      this._socket = new WebSocket(this._socketEndpoint)\r\n    }\r\n  }\r\n\r\n  closeSocket(){\r\n    if (this._socket != null){\r\n      this._socket.close();\r\n      this._socket=null;\r\n    }\r\n  }\r\n\r\n  connect(cb){\r\n    console.log(\"Attempting Connection...\");\r\n\r\n    this._socket.onopen =()=>{\r\n      console.log(\"Successfully Connected\");\r\n    };\r\n    \r\n    this._socket.onmessage = (msg)=>{\r\n      cb(msg)\r\n    };\r\n    this._socket.onclose=(event)=>{\r\n      console.log(\"Socket Closed Connection: \", event);\r\n      cb(event)\r\n    };\r\n    this._socket.onerror = (error) => {\r\n      console.log(\"Socket Error: \", error)\r\n    };\r\n  };\r\n\r\n  sendMsg(msg,userId){\r\n    console.log(\"sending msg: \", msg);\r\n    \r\n    let messageData = {\r\n      \"message\":msg,\r\n      \"id\":userId\r\n    }\r\n    this._socket.send(JSON.stringify(messageData));\r\n  };\r\n\r\n}\r\nexport default ChatSocket;","import Message from \"./Message.jsx\";\r\n\r\nexport default Message;","import React, { Component } from \"react\";\r\nimport \"./Message.scss\";\r\n\r\nclass Message extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    let temp = JSON.parse(this.props.message);\r\n    this.state = {\r\n      message: temp,\r\n      timeStamp: this.displayTime(temp.timeStamp)\r\n    };\r\n  }\r\n\r\n  render() {\r\n    return <div className=\"Message\">\r\n      <span className =\"timeStamp\" >\r\n            {this.state.timeStamp}</span>\r\n      <span className=\"userName\" style={{color:this.state.message.color}}>\r\n            {this.state.message.user}&nbsp;\r\n            </span>\r\n      <span className=\"messageBody\" >{\r\n            this.state.message.body}\r\n            </span>\r\n      </div>;\r\n  }\r\n\r\n\r\n  displayTime(timeStamp) {\r\n    var localeTime = new Date(timeStamp).toLocaleString();\r\n    return `${localeTime.substr(11, 4)}\\u00A0${localeTime.substr(localeTime.length - 2, localeTime.length)}`;\r\n  }\r\n}\r\n\r\nexport default Message;","import React, { Component } from \"react\";\r\nimport Message from \"../Message\";\r\nimport \"./ChatHistory.scss\";\r\n\r\nclass ChatHistory extends Component {\r\n\r\n  componentDidMount(){\r\n    this.scrollToBottom();\r\n  }\r\n\r\n  componentDidUpdate(){\r\n    this.scrollToBottom();\r\n  }\r\n  scrollToBottom(){\r\n    this.el.scrollIntoView({behvaior:'smooth'});\r\n  }\r\n\r\n  render() {\r\n    console.log(this.props.chatHistory);\r\n    const messages = this.props.chatHistory.map( (msg,index) => <Message key={index} message={msg.data} />);\r\n\r\n    // gets messages from app.js through props\r\n\r\n    return (\r\n      <div className=\"ChatHistory\">\r\n        <div id=\"chatHistory\" className=\"disable-scrollbars\">\r\n          <div id=\"history\"> \r\n          {messages}\r\n          </div>\r\n          <div ref={el=>{this.el = el;}} />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ChatHistory;","import ChatInput from \"./ChatInput\";\r\n\r\nexport default ChatInput;","import React, { Component } from \"react\";\r\nimport \"./ChatInput.scss\";\r\n\r\nclass ChatInput extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"ChatInput\">\r\n        <input onKeyDown={this.props.send} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ChatInput;","import UserList from \"./UserList\";\r\n\r\n\r\nexport default UserList;","import React,{Component} from 'react'\r\nimport \"./UserList.scss\"\r\n\r\nclass  UserList extends Component {\r\n  \r\n render() { \r\n    return (\r\n      <div className=\"UserList\">\r\n        <div className=\"user-list\">\r\n          <p className=\"usersLabel\"> Users:</p>\r\n           {this.props.userList.map((user, index) => \r\n          <p key={index} className=\"user\" style={{ color: user.color }}>{user.name}</p>\r\n        )}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default UserList\r\n","import ChatPage from \"./ChatPage.jsx\";\r\n\r\nexport default ChatPage;","import React,{Component} from 'react';\r\nimport { Redirect } from 'react-router-dom';\r\nimport ChatSocket from '../../api/ChatSocket';\r\nimport \"./ChatPage\"\r\nimport ChatHistory from \"../ChatHistory/ChatHistory\";\r\nimport ChatInput from \"../ChatInput\";\r\nimport UserList from \"../Users\";\r\nimport auth from '../../authorization/auth';\r\n\r\n\r\nclass ChatPage extends Component {\r\n  _chatSocket;\r\n  \r\n  constructor(props){\r\n    super(props);\r\n    this.state={\r\n      isActive:false,\r\n      chatHistory:[],\r\n      userList:[]\r\n    }\r\n  }\r\n\r\n  handleShow = () => {\r\n    this.setState({\r\n      isActive:true\r\n    });\r\n  };\r\n\r\n  handleHide = () => {\r\n    this.setState({\r\n      isActive:false\r\n    });\r\n  };\r\n\r\n  componentDidMount(){\r\n    if ( auth.isAuthenticated()){\r\n      this._chatSocket = new ChatSocket(\"ws://localhost:8080/ws\", auth.getUserName(), auth.getUserId(), true)\r\n      this._chatSocket.connect((event)=>{\r\n        this.handleSocketEvent(event)\r\n      });\r\n    }\r\n  }\r\n  componentWillUnmount(){\r\n    this._chatSocket.closeSocket();\r\n  }\r\n  handleSocketEvent(event){\r\n    switch (event.type){\r\n      case \"close\":\r\n        this.handleLogout()\r\n        break;\r\n      case \"message\":\r\n        this.handleMessage(event)\r\n        break;\r\n      default:\r\n    }\r\n  }\r\n  \r\n  handleLogout(){\r\n    auth.logout(()=> {\r\n      this.props.history.push(\"/\")\r\n    })\r\n  }\r\n\r\n  handleMessage(event){\r\n    const msgData = JSON.parse(event.data);\r\n    switch(msgData.type){\r\n      case 0:\r\n        this.setState({\r\n          userList: msgData.clientList\r\n        });\r\n        break;\r\n      case 1:\r\n        this.setState(prevState => ({\r\n          chatHistory:[...prevState.chatHistory, event]\r\n        }))\r\n        break;\r\n      default:\r\n    }\r\n  }\r\n  send(event){\r\n    if(event.keyCode === 13 && event.target.value !== \"\") {\r\n      this._chatSocket.sendMsg(event.target.value, auth.getUserId());\r\n      event.target.value = \"\";\r\n    }\r\n  }\r\n\r\n  \r\n  render() {\r\n    if(!auth.isAuthenticated){\r\n      return <Redirect to='/' />\r\n    }\r\n    return (\r\n      <div className=\"ChatPage\">\r\n        <UserList userList={this.state.userList}/>\r\n        <ChatHistory chatHistory = {this.state.chatHistory}/>\r\n        <ChatInput send={e=> this.send(e)}/>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default ChatPage\r\n","import LoginPage from \"./LoginPage\";\r\n\r\n\r\nexport default LoginPage;","import React, {Component} from 'react'\r\nimport auth from '../../authorization/auth';\r\nimport \"./LoginPage.scss\"\r\n\r\nclass LoginPage extends Component {\r\n\r\n  constructor(props){\r\n    super(props);\r\n    this.state={\r\n      name:''\r\n    };\r\n  }\r\n  handleChange = (e) => {\r\n    this.setState({\r\n      [e.target.name]: e.target.value\r\n    })\r\n  }\r\n\r\n\r\n  render () {\r\n    return (\r\n      <div className=\"LoginPage\">\r\n        <div className=\"loginContainer\" onKeyPress={this.keyPressed}>\r\n          <div className=\"form__group field\">\r\n            <input type=\"input\" className=\"form__field\" name='name' id=\"name\" value={this.state.name} onChange={e=> this.handleChange(e)}/>\r\n            <label htmlFor=\"name\" className=\"form__label\">Username</label>\r\n          </div>\r\n\r\n          <button className=\"login-button\" onKeyPress={this.onKeyPress} onClick={this.submitLogin}>Login</button>\r\n\r\n        </div>\r\n\r\n      </div>\r\n\r\n    )\r\n    }\r\n\r\n    submitLogin =()=>{\r\n      auth.login(this.state.name,()=>{\r\n        this.props.history.push(\"/chat\")\r\n      })\r\n    }\r\n\r\n    keyPressed =(event)=>{\r\n      if (event.key === \"Enter\"){\r\n        this.submitLogin();\r\n      }\r\n    }\r\n}\r\n\r\nexport default LoginPage\r\n","import React from 'react'\r\nimport {Route, Redirect} from 'react-router-dom'\r\nimport auth from './auth'\r\n\r\nexport const ProtectedRoute = ({component: Component, ...rest}) => {\r\n\r\n\r\n  return(\r\n    <Route \r\n    {...rest}\r\n    render = {(props) => auth.isAuthenticated()\r\n    ? <Component {...props}/>\r\n    : <Redirect to={{pathname:'/', state:{from:props.location}}} />}\r\n    />\r\n  )\r\n}","// App.js\nimport React, { Component } from \"react\";\nimport {Route, Switch} from 'react-router-dom';\nimport Header from \"./Components/Header\";\n// import ServerList from \"./Components/ServerList\";\nimport ChatPage from './Components/ChatPage';\nimport LoginPage from './Components/Login';\nimport {ProtectedRoute} from './authorization/protected.route'\nimport \"./App.css\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Header/>\n        {/* <ServerList/> */}\n        <Route> \n          <Switch>\n            <Route exact path=\"/\" component={LoginPage}/>\n            <ProtectedRoute exact path=\"/chat\" component={ChatPage} />\n            <Route path=\"*\" component={() => \"404 NOT FOUND\"}/>\n          </Switch>\n         </Route>\n      </div>\n    );\n  }\n}\n\nexport default App;","const isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n// import reportWebVitals from './reportWebVitals';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom';\n\n\nReactDOM.render(\n\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById('root')\n);\nserviceWorker.unregister();\n\n// reportWebVitals();"],"sourceRoot":""}